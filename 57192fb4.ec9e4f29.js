(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{124:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return l}));var n=r(1),o=r(6),i=(r(0),r(169)),a={id:"sdk-services-bridge",title:"Bridge",sidebar_label:"Bridge"},s={id:"sdk-services-bridge",title:"Bridge",description:"Service used to retrieve Bridge Protocol Corporation information from the Bridge Network\r",source:"@site/docs\\sdk-services-bridge.md",permalink:"/docs/sdk-services-bridge",sidebar_label:"Bridge",sidebar:"gettingStarted",previous:{title:"Blockchain",permalink:"/docs/sdk-services-blockchain"},next:{title:"Claim",permalink:"/docs/sdk-services-claim"}},c=[{value:"Functions",id:"functions",children:[{value:"getBridgePassportId()",id:"getbridgepassportid",children:[]},{value:"getBridgePublicKey()",id:"getbridgepublickey",children:[]},{value:"getBridgeNetworkFee()",id:"getbridgenetworkfee",children:[]}]}],p={rightToc:c};function l(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Service used to retrieve Bridge Protocol Corporation information from the Bridge Network"),Object(i.b)("h2",{id:"functions"},"Functions"),Object(i.b)("h3",{id:"getbridgepassportid"},"getBridgePassportId()"),Object(i.b)("p",null,"Retrieve the Bridge Network Passport Id"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async getBridgePassportId(useApi, passport, passphrase)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"useApi")," (bool) - whether or not to use the local constants or retrieve from Bridge Network API"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication, only required if useApi=true"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key, only required if useApi=true")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"getbridgepublickey"},"getBridgePublicKey()"),Object(i.b)("p",null,"Retrieve the Bridge Network Public Key"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async getBridgePublicKey(useApi, passport, passphrase)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"useApi")," (bool) - whether or not to use the local constants or retrieve from Bridge Network API"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication, only required if useApi=true"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key, only required if useApi=true")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"getbridgenetworkfee"},"getBridgeNetworkFee()"),Object(i.b)("p",null,"Retrieve the Bridge Network Fee"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async getBridgeNetworkFee(passport, passphrase)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")))}l.isMDXComponent=!0},169:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return g}));var n=r(0),o=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s({},t,{},e)),r},b=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(r),d=n,g=b["".concat(a,".").concat(d)]||b[d]||u[d]||i;return r?o.a.createElement(g,s({ref:t},p,{components:r})):o.a.createElement(g,s({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{163:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return o})),t.d(r,"metadata",(function(){return c})),t.d(r,"rightToc",(function(){return l})),t.d(r,"default",(function(){return u}));var n=t(1),i=t(6),a=(t(0),t(176)),o={id:"bridge-claim",title:"Bridge Verified Claim",sidebar_label:"Bridge Verified Claim"},c={id:"bridge-claim",title:"Bridge Verified Claim",description:"# Claim\r",source:"@site/docs\\model-claim.md",permalink:"/docs/bridge-claim",sidebar_label:"Bridge Verified Claim"},l=[],s={rightToc:l};function u(e){var r=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},s,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"claim"},"Claim"),Object(a.b)("p",null,"A claim contains a piece of information about the passport that was issued by a another passport.  These are the un-encrypted versions of the claim that are only readable and transmittable by the passport they were issued for."),Object(a.b)("img",{src:"/img/model-claim.jpg"}),Object(a.b)("h1",{id:"bridge-verified-claims"},"Bridge Verified Claims"),Object(a.b)("p",null,"Bridge Verified Claims add a layer of trust since they add the requirement of being issued by a known Bridge Marketplace provider. Bridge Network Partners can verify the signature and retrieve the issuing passport information to ensure it was issued by a trusted entity with good standing on the network.  Only Bridge Verified Claims may be written to on-chain blockchain storage."))}u.isMDXComponent=!0},176:function(e,r,t){"use strict";t.d(r,"a",(function(){return d})),t.d(r,"b",(function(){return b}));var n=t(0),i=t.n(n);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),u=function(e){var r=i.a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):c({},r,{},e)),t},d=function(e){var r=u(e.components);return i.a.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return i.a.createElement(i.a.Fragment,{},r)}},f=Object(n.forwardRef)((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),f=n,b=d["".concat(o,".").concat(f)]||d[f]||p[f]||a;return t?i.a.createElement(b,c({ref:r},s,{components:t})):i.a.createElement(b,c({ref:r},s))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,o=new Array(a);o[0]=f;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var s=2;s<a;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);
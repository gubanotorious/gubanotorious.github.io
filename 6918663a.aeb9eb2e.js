(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{133:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return p})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(1),a=r(6),i=(r(0),r(176)),o={id:"sdk-services-application",title:"Application",sidebar_label:"Application"},p={id:"sdk-services-application",title:"Application",description:"Service to manage the lifecycle of verification requests on the Bridge Network\r",source:"@site/docs\\sdk-services-application.md",permalink:"/docs/sdk-services-application",sidebar_label:"Application",sidebar:"gettingStarted",previous:{title:"Payment",permalink:"/docs/sdk-messaging-payment"},next:{title:"Blockchain",permalink:"/docs/sdk-services-blockchain"}},s=[{value:"Functions",id:"functions",children:[{value:"createApplication()",id:"createapplication",children:[]},{value:"getApplicationList()",id:"getapplicationlist",children:[]},{value:"getApplication()",id:"getapplication",children:[]},{value:"updatePaymentTransaction()",id:"updatepaymenttransaction",children:[]},{value:"retry()",id:"retry",children:[]}]}],c={rightToc:s};function l(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Service to manage the lifecycle of verification requests on the Bridge Network"),Object(i.b)("h2",{id:"functions"},"Functions"),Object(i.b)("h3",{id:"createapplication"},"createApplication()"),Object(i.b)("p",null,"Create a new verification request for the passport with a specified partner"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async createApplication(passport, passphrase, partner, network, address)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"partner")," (string) - the passport id of the target partner,"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"network")," (string) - the blockchain network to pay network fees on"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"address")," (string) - the bloockchain address fees will be paid from")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"getapplicationlist"},"getApplicationList()"),Object(i.b)("p",null,"Retrieve all verification requests for the passport"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async getApplicationList(passport, passphrase)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"getapplication"},"getApplication()"),Object(i.b)("p",null,"Retrieve the full details of a specific verification request"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async getApplication(passport, passphrase, id)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"id")," (string) - unique identifier of the verification request")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"updatepaymenttransaction"},"updatePaymentTransaction()"),Object(i.b)("p",null,"Updates an existing verification request with payment transaction information for network fee payment"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async updatePaymentTransaction(passport, passphrase, id, transactionId)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"id")," (string) - the unique identifier of the verification request"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"transactionId")," (string) - the blockchain transaction id of the payment")),Object(i.b)("hr",null),Object(i.b)("h3",{id:"retry"},"retry()"),Object(i.b)("p",null,"Attempt to (re)process and send the verification request to the verifiation partner on the Bridge Network.  If a prior attempt has failed, this is used to re-attempt transmission."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"async retry(passport, passphrase, id)\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passport")," (",Object(i.b)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"id")," - the unique identifier of the verification request")))}l.isMDXComponent=!0},176:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return O}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),l=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):p({},t,{},e)),r},b=function(e){var t=l(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=l(r),d=n,O=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return r?a.a.createElement(O,p({ref:t},c,{components:r})):a.a.createElement(O,p({ref:t},c))}));function O(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);